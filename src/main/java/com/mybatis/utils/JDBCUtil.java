package com.mybatis.utils;

import java.sql.*;
import java.util.List;

public class JDBCUtil {

    private static String driverClassName;
    private static String URL;
    private static String username;
    private static String password;
    private static boolean autoCommit;

    private static Connection conn;

    static {
        config();
    }

    private static void config() {
        driverClassName = "com.mysql.jdbc.Driver";

        URL = "jdbc:mysql://localhost:3306/videoshow?useUnicode=true&characterEncoding=utf8";

        username = "root";

        password = "root";

        autoCommit = false;
    }

    private static boolean load() {
        try {
            Class.forName(driverClassName);
            return true;
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return false;
    }

    private static boolean invalid() {
        if (conn != null) {
            try {
                //isValid方法是判断Connection是否有效,如果连接尚未关闭并且仍然有效，则返回 true
                if (conn.isClosed() || !conn.isValid(3)) {
                    return true;
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            //conn不为null且没有关闭且isValid 返回 true，说明是可以使用的 ( 返回false )
            return false;
        } else {
            return true;
        }
    }

    public static Connection connect() {
        if (invalid()) {
            load();
            try {
                conn = DriverManager.getConnection(URL, username, password);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return conn;
    }

    public static void transaction() {
        try {
            conn.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static Statement statement() {
        Statement st = null;
        connect();
        transaction();
        try {
            st = conn.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return st;
    }

    private static PreparedStatement preparedStatement(String sql, boolean autoGeneratedKeys) {
        PreparedStatement ps = null;
        connect();
        transaction();

        try {
            if (autoGeneratedKeys) {
                ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            } else {
                ps = conn.prepareStatement(sql);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return ps;
    }

    public static ResultSet query(String sql, List<Object> params) {
        if (sql == null || sql.trim().isEmpty() || !sql.trim().toLowerCase().startsWith("select")) {
            throw new RuntimeException("sql 语句为空或不为select语句");
        }
        ResultSet rs = null;
        if (params.size() > 0) {
            PreparedStatement ps = preparedStatement(sql, false);
            try {
                for (int i = 0; i < params.size(); i++) {
                    ps.setObject(i + 1, params.get(i));
                }
                rs = ps.executeQuery();
            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println("sql 执行失败");
            }
        } else {
            Statement st = statement();
            try {
                rs = st.executeQuery(sql);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return rs;
    }

    private static Object typeof(Object o) {
        Object r = o;
        if (o instanceof java.sql.Timestamp) {
            return r;
        }
        if (o instanceof java.util.Date) {
            java.util.Date d = (java.util.Date) o;
            r = new java.sql.Date(d.getTime());
            return r;
        }
        if (o instanceof Character || o.getClass() == char.class) {
            r = String.valueOf(o);
            return r;
        }
        return r;
    }

    public static boolean execute(String sql, Object... params) {
        if (sql == null || sql.trim().isEmpty() || sql.trim().toLowerCase().startsWith("select")) {
            throw new RuntimeException("sql 为空或不是DDL/DML语句");
        }
        boolean r = false;
        sql = sql.trim();
        sql = sql.toLowerCase();
        String prefix = sql.substring(0, sql.indexOf(" "));
        String operation = "";
        switch (prefix) {
            case "create":
                operation = "create table";
                break;
            case "alter":
                operation = "update table";
                break;
            case "drop":
                operation = "drop table";
                break;
            case "truncate":
                operation = "truncate table";
                break;
            case "insert":
                operation = "insert :";
                break;
            case "update":
                operation = "update :";
                break;
            case "delete":
                operation = "delete :";
                break;
        }
        if (params.length > 0) {
            PreparedStatement ps = preparedStatement(sql, false);
            Connection c = null;
            try {
                c = ps.getConnection();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                for (int i = 0; i < params.length; i++) {
                    Object p = params[i];
                    p = typeof(p);
                    ps.setObject(i + 1, p);
                }
                ps.executeUpdate();
                commit(c);
                r = true;
            } catch (SQLException e) {
                e.printStackTrace();
                rollback(c);
            }

        } else {
            Statement st = statement();
            Connection c = null;
            try {
                c = st.getConnection();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                st.executeUpdate(sql);
                commit(c);
                r = true;
            } catch (SQLException e) {
                e.printStackTrace();
                rollback(c);
            }

        }
        return r;

    }

    public static int insert(String sql, boolean autoGeneratedKeys, List<Object> params) {
        int var = -1;
        if (sql == null || sql.trim().isEmpty()) {
            throw new RuntimeException("请检查是否指定sql");
        }
        if (!sql.trim().toLowerCase().startsWith("insert")) {
            System.out.println(sql.toLowerCase());
            throw new RuntimeException("你指定的不是插入语句");
        }
        sql = sql.trim();
        sql = sql.toLowerCase();
        if (params.size() > 0) {//有参数
            PreparedStatement ps = preparedStatement(sql, autoGeneratedKeys);
            Connection c = null;
            try {
                c = ps.getConnection();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                for (int i = 0; i <params.size() ; i++) {
                    Object p = params.get(i);
                    p= typeof(p);
                    ps.setObject(i+1,p);
                }
                int count = ps.executeUpdate();
                if(autoGeneratedKeys){//如果希望获得数据库产生的键
                    ResultSet rs = ps.getGeneratedKeys();
                    if(rs.next()){
                        var = rs.getInt(1);
                    }
                }else {
                    var = count;
                }
            } catch (SQLException e) {
                System.out.println("数据保存失败"+e.getMessage());
                rollback(c);
            }
            commit(c);
        }else {
            Statement st = statement();
            Connection c =null;
            try {
                 c = st.getConnection();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            // 执行 DDL 或 DML 语句，并返回执行结果
            try {
                int count = st.executeUpdate(sql);
                if (autoGeneratedKeys) { // 如果企望获得数据库产生的键
                    ResultSet rs = st.getGeneratedKeys(); // 获得数据库产生的键集
                    if (rs.next()) { // 因为是保存的是单条记录，因此至多返回一个键
                        var = rs.getInt(1); // 获得值并赋值给 var 变量
                    }
                } else {
                    var = count; // 如果不需要获得，则将受sql影像的记录数赋值给 var 变量
                }
                commit(c); // 提交事务
            } catch (SQLException e) {
                System.out.println("数据保存失败: " + e.getMessage());
                rollback(c); // 回滚事务
            }

        }
        return  var;
    }

    private static void rollback(Connection c) {
        if(c!=null && !autoCommit){
            try {
                c.commit();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private static void commit(Connection c) {
        if(c!=null&& !autoCommit){
            try {
                c.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public static void release(Object cloaseable){
        if(cloaseable !=null){
            if(cloaseable instanceof  ResultSet){
                ResultSet rs = (ResultSet) cloaseable;
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(cloaseable instanceof Statement ){
                Statement st = (Statement) cloaseable;
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(cloaseable instanceof Connection){
                Connection c = (Connection) cloaseable;
                try {
                    c.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
